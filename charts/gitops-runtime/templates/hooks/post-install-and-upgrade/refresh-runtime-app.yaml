{{- if .Values.global.runtime.argoCDApplication.enabled }}
apiVersion: batch/v1
kind: Job
metadata:
  name: refresh-runtime-app
  annotations:
    "helm.sh/hook": post-install,post-upgrade
    "helm.sh/hook-delete-policy": hook-succeeded,before-hook-creation
spec:
  backoffLimit: 6
  template:
    spec:
      serviceAccount: {{ include "codefresh-gitops-runtime.argocd.appcontroller.serviceAccountName" . }}
      restartPolicy: Never
      containers:
      - name: refresh-runtime-app
        image: "{{ .Values.installer.image.repository }}:{{ .Values.installer.image.tag | default .Chart.Version }}"
        imagePullPolicy: {{ .Values.installer.image.pullPolicy }}
        env:
        - name: ARGOCD_SERVER_NAME
          value: {{ include "codefresh-gitops-runtime.argocd.server.servicename" . }}
        - name: RUNTIME_APP_NAME
          value: {{ .Values.global.runtime.argoCDApplication.name }}
        - name: ARGOCD_TOKEN
          valueFrom:
            secretKeyRef:
              name: argocd-token
              key: token
              optional: true
        - name: ARGOCD_INIT_PASSWORD
          valueFrom:
            secretKeyRef:
              name: argocd-initial-admin-secret
              key: password
              optional: true            
        command: 
        - "bash" 
        - "-c"
        - |
          nMaxRetries=5
          nRetries=0
          refreshCommand=""

          if [[ ! -z "${ARGOCD_TOKEN}" ]]; then
            refreshCommand="argocd --server "${ARGOCD_SERVER_NAME}" --plaintext --insecure --auth-token ${ARGOCD_TOKEN} app get ${RUNTIME_APP_NAME} --hard-refresh"
          elif [[ ! -z  "${ARGOCD_INIT_PASSWORD}" ]]; then
            refreshCommand="argocd login "${ARGOCD_SERVER_NAME}" --plaintext --insecure --username admin --password "${ARGOCD_INIT_PASSWORD}" && argocd app get ${RUNTIME_APP_NAME} --hard-refresh"
          else
              echo "ERROR: ARGOCD_TOKEN or ARGOCD_INIT_PASSWORD required"
              exit 1
          fi

          while true; do
              eval $refreshCommand

              if [[ $? -eq 0 ]]; then
                  break
              else
              echo $?
              nRetries=$((nRetries+1))
              
              echo "App sync failed. Trying again in 5 seconds"
              sleep 5
                  if [[ "$nRetries" -gt "$nMaxRetries" ]]; then
                      echo "Error: Could not sync apps. Probably ArgoCD did not start"
                      exit 1
                  fi
              fi
            done
{{- end }}